==> Cloning from https://github.com/PetSOS-teamsite/petsos
==> Checking out commit 90170c90729f189d2c8b04e9be24f6a26ec4b25a in branch main
==> Using Node.js version 22.16.0 (default)
==> Docs on specifying a Node.js version: https://render.com/docs/node-version
==> Running build command 'npm install --include=dev && npm run build'...
added 614 packages, and audited 615 packages in 11s
74 packages are looking for funding
  run `npm fund` for details
9 vulnerabilities (3 low, 5 moderate, 1 high)
To address issues that do not require attention, run:
  npm audit fix
To address all issues possible (including breaking changes), run:
  npm audit fix --force
Some issues need review, and may require choosing
a different dependency.
Run `npm audit` for details.
> rest-express@1.0.0 build
> vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist
vite v5.4.20 building for production...
transforming...
Browserslist: browsers data (caniuse-lite) is 12 months old. Please run:
  npx update-browserslist-db@latest
  Why you should do it regularly: https://github.com/browserslist/update-db#readme
âœ“ 2152 modules transformed.
rendering chunks...
computing gzip size...
../dist/public/index.html                   2.07 kB â”‚ gzip:   0.80 kB
../dist/public/assets/index-2ysvaxjy.css   81.86 kB â”‚ gzip:  13.58 kB
../dist/public/assets/index-Babilc0A.js   991.44 kB â”‚ gzip: 294.84 kB
(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
âœ“ built in 6.18s
  dist/index.js  103.4kb
âš¡ Done in 11ms
==> Uploading build...
==> Uploaded in 7.2s. Compression took 5.0s
==> Build successful ðŸŽ‰
==> Deploying...
==> Running 'npm start'
==> No open ports detected, continuing to scan...
> rest-express@1.0.0 start
> NODE_ENV=production node dist/index.js
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
[Config] Environment: production
[Config] Port: 10000
[Config] Rate limiting: enabled
[Config] Session secure cookies: true
[Config] Sentry monitoring: disabled
[Config] Regional defaults: HK (+852), Language: zh-HK
Sentry DSN not provided - error tracking disabled
9:44:11 AM [express] serving on port 10000
==> Your service is live ðŸŽ‰
==> 
==> ///////////////////////////////////////////////////////////
==> 
==> Available at your primary URL https://petsos.site + 2 more domains
==> 
==> ///////////////////////////////////////////////////////////
Need better ways to work with logs? Try theRender CLI, Render MCP Server, or set up a log stream integration 